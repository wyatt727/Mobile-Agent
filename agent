#!/usr/bin/python3
"""
Claude Agent CLI - Execute commands naturally using AI
Usage: agent <request>
Example: agent open calculator
"""
import os
import sys
import subprocess
from pathlib import Path

# Debug environment variables at startup
print(f"🔍 AGENT STARTUP DEBUG:", file=sys.stderr)
print(f"   AGENT_DEBUG_SUBPROCESS: {os.environ.get('AGENT_DEBUG_SUBPROCESS', 'NOT SET')}", file=sys.stderr)
print(f"   SHELL: {os.environ.get('SHELL', 'NOT SET')}", file=sys.stderr)
print(f"   PWD: {os.environ.get('PWD', 'NOT SET')}", file=sys.stderr)

# Enable subprocess debugging if AGENT_DEBUG_SUBPROCESS is set
if os.environ.get('AGENT_DEBUG_SUBPROCESS') == '1':
    import traceback
    
    # Store original subprocess functions
    _original_run = subprocess.run
    _original_Popen = subprocess.Popen
    
    def log_subprocess(func_name, args, kwargs):
        """Log subprocess call details"""
        print(f"\n🔍 SUBPROCESS CALL: {func_name}", file=sys.stderr)
        print(f"   Command: {args[0] if args else 'None'}", file=sys.stderr)
        
        # Check environment
        env = kwargs.get('env')
        if env is None:
            print(f"   Environment: INHERITED (DANGEROUS!)", file=sys.stderr)
            print(f"   SHELL in os.environ: {os.environ.get('SHELL', 'Not set')}", file=sys.stderr)
            print(f"   HOME in os.environ: {os.environ.get('HOME', 'Not set')}", file=sys.stderr)
            print(f"   ⚠️  This call will inherit your shell environment!", file=sys.stderr)
        else:
            print(f"   Environment: CLEAN ({len(env)} vars)", file=sys.stderr)
            shell_vars = ['SHELL', 'HOME', 'ZSH', 'BASH', 'ENV', 'BASH_ENV']
            for var in shell_vars:
                if var in env:
                    print(f"   ⚠️  {var} in clean env: {env[var]}", file=sys.stderr)
        
        # Print call stack
        stack = traceback.extract_stack()
        print(f"   Call stack:", file=sys.stderr)
        for frame in stack[-4:-1]:
            print(f"     {frame.filename}:{frame.lineno} in {frame.name}", file=sys.stderr)
        print(f"   {'='*60}", file=sys.stderr)

    def debug_run(*args, **kwargs):
        log_subprocess('subprocess.run', args, kwargs)
        return _original_run(*args, **kwargs)

    def debug_Popen(*args, **kwargs):
        log_subprocess('subprocess.Popen', args, kwargs)
        return _original_Popen(*args, **kwargs)

    # Monkey patch subprocess
    subprocess.run = debug_run
    subprocess.Popen = debug_Popen
    
    print("🔍 Subprocess debugging enabled inline!", file=sys.stderr)
    print(f"🔍 Current SHELL: {os.environ.get('SHELL', 'Not set')}", file=sys.stderr)

# Determine the agent installation directory (resolve symlinks)
AGENT_DIR = Path(__file__).resolve().parent
VENV_DIR = AGENT_DIR / ".claude_venv"

# Define prompt paths
NETHUNTER_PROMPT = AGENT_DIR / "claude_agent" / "prompt" / "nethunter-system-prompt-v3.md"
MACOS_PROMPT = AGENT_DIR / "system-prompt.txt"

# Detect environment and choose appropriate prompt
def detect_environment():
    """Detect if running on NetHunter or MacOS"""
    import platform
    
    # Check for NetHunter indicators
    nethunter_indicators = [
        Path('/etc/nethunter'),
        Path('/data/local/nhsystem'),
        Path('/root/.nethunter')
    ]
    
    # Check environment variable override
    if os.getenv('NETHUNTER_MODE') == '1':
        return 'nethunter'
    
    # Check for NetHunter file indicators
    for indicator in nethunter_indicators:
        if indicator.exists():
            return 'nethunter'
    
    # Check OS type
    if platform.system() == 'Darwin':
        return 'macos'
    
    # Default to NetHunter for mobile agent
    return 'nethunter'

# Choose prompt based on detected environment
env_type = detect_environment()
if env_type == 'nethunter' and NETHUNTER_PROMPT.exists():
    SYSTEM_PROMPT_FILE = NETHUNTER_PROMPT
elif env_type == 'macos' and MACOS_PROMPT.exists():
    SYSTEM_PROMPT_FILE = MACOS_PROMPT
else:
    # Fallback: use whichever prompt exists
    SYSTEM_PROMPT_FILE = NETHUNTER_PROMPT if NETHUNTER_PROMPT.exists() else MACOS_PROMPT

# Add the agent directory to Python path
sys.path.insert(0, str(AGENT_DIR))

def ensure_venv():
    """Ensure virtual environment exists and is set up."""
    venv_python = VENV_DIR / "bin" / "python"
    
    # Check if venv exists (should be created by install.sh)

    if not VENV_DIR.exists():
        print("Error: Virtual environment not found. Please run ./install.sh first.")
        sys.exit(1)
    
    # Quick sanity check that requirements are installed
    marker_file = VENV_DIR / ".requirements_installed"
    if not marker_file.exists():
        print("Warning: Dependencies may not be installed. Run ./install.sh to ensure proper setup.")
    
    return venv_python

def run_agent_request(venv_python, request):
    """Run the agent with the user's request."""
    # Debug: print request
    if os.getenv('AGENT_DEBUG'):
        print(f"Debug: Processing request: {request}", file=sys.stderr)
        print(f"Debug: Agent dir: {AGENT_DIR}", file=sys.stderr)
        print(f"Debug: Venv Python: {venv_python}", file=sys.stderr)
    
    # Set up absolutely minimal environment - no shell variables at all
    # Only include what's absolutely necessary for Python to run
    env = {
        'PYTHONPATH': str(AGENT_DIR),
        'PATH': '/usr/bin:/bin:/usr/local/bin:/usr/sbin:/sbin',  # Fixed minimal PATH
        'PYTHONIOENCODING': 'utf-8',
        # Explicitly prevent Python from loading any startup files
        'PYTHONNOUSERSITE': '1',  # Don't add user site directory
        'PYTHONDONTWRITEBYTECODE': '1',  # Don't create .pyc files
        # Don't pass HOME, USER, PYTHONSTARTUP, or any shell-related vars
        # This prevents any initialization files from being found or loaded
    }
    # Add AGENT_DEBUG if set
    if os.getenv('AGENT_DEBUG'):
        env['AGENT_DEBUG'] = os.getenv('AGENT_DEBUG')
    # Add NETHUNTER_MODE if we're in NetHunter
    if detect_environment() == 'nethunter':
        env['NETHUNTER_MODE'] = '1'
    
    # Create a Python script to run in the venv
    script = f"""
import sys
import os

# Ensure the agent directory is in path
agent_dir = r'{AGENT_DIR}'
if agent_dir not in sys.path:
    sys.path.insert(0, agent_dir)

# Now import claude_agent modules
try:
    from claude_agent.config import AgentConfig
    from claude_agent.core.claude_agent import ClaudeAgent
except ImportError as e:
    print(f"Import error: {{e}}", file=sys.stderr)
    print(f"sys.path: {{sys.path}}", file=sys.stderr)
    print(f"Agent dir exists: {{os.path.exists(agent_dir)}}", file=sys.stderr)
    print(f"Claude agent dir exists: {{os.path.exists(os.path.join(agent_dir, 'claude_agent'))}}", file=sys.stderr)
    sys.exit(1)

# Configure agent
config = AgentConfig()
config.claude_system_prompt_file = r'{SYSTEM_PROMPT_FILE}'
config.verbose = False
# Set agent directory for finding additional prompts
config.agent_dir = r'{AGENT_DIR}'

# Initialize agent
try:
    agent = ClaudeAgent(config=config)
except Exception as e:
    print(f"Error initializing agent: {{e}}", file=sys.stderr)
    sys.exit(1)

# Process request
request = r'''{request.replace("'", "\\'")}'''
debug = {os.getenv('AGENT_DEBUG', '').lower() in ('1', 'true', 'yes')}
try:
    response, results = agent.process_request(request)
    
    # Always show Claude's response
    print(response)
    
    # Then show execution results if any
    if results:
        print("")
        print("="*60)
        print("EXECUTION OUTPUT:")
        print("="*60)
        
        for i, result in enumerate(results):
            if len(results) > 1:
                print("")
                print("[Block " + str(i+1) + "]")
            
            if result.success:
                if result.output:
                    newline_char = '\\n'
                    print(result.output, end='' if result.output.endswith(newline_char) else newline_char)
            else:
                print(f"Error: {{result.error}}", file=sys.stderr)
except Exception as e:
    print(f"Error processing request: {{e}}", file=sys.stderr)
    if debug:
        import traceback
        traceback.print_exc(file=sys.stderr)
    sys.exit(1)
"""
    
    # Run the script with absolutely minimal environment
    # Use explicit python path and completely clean environment
    result = subprocess.run(
        [str(venv_python), "-c", script],
        capture_output=True,
        text=True,
        env=env,
        # Additional isolation on Unix systems
        start_new_session=True if sys.platform != 'win32' else False
    )
    
    if result.stdout:
        print(result.stdout, end='')
    if result.stderr:
        print(result.stderr, end='', file=sys.stderr)
    
    return result.returncode

def main():
    """Main entry point."""
    if len(sys.argv) < 2:
        print("Usage: agent <request>")
        print("Example: agent open calculator")
        sys.exit(1)
    
    # Join all arguments as the request
    request = " ".join(sys.argv[1:])
    
    # Special commands
    if request in ["--help", "-h"]:
        print(__doc__)
        sys.exit(0)
    
    if request == "--version":
        print("Claude Agent v2.0")
        sys.exit(0)
    
    # Handle kill command to clean up web servers
    if request in ["kill", "cleanup", "kill-servers"]:
        print("Cleaning up Claude Agent web servers...")
        # Import and run cleanup
        try:
            # Ensure we're using the venv Python for consistency
            venv_python = ensure_venv()
            cleanup_script = """
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from claude_agent.core.agent_cleanup import AgentCleanup

cleanup = AgentCleanup()
result = cleanup.kill_all_agent_servers(interactive=False)

if result.get('servers_found', 0) == 0:
    print("No active agent servers found")
else:
    print(f"Killed {result['killed']} servers")
    if result.get('directories_cleaned', 0) > 0:
        print(f"Cleaned {result['directories_cleaned']} directories")
    if result.get('freed_ports'):
        print(f"Freed ports: {', '.join(map(str, sorted(result['freed_ports'])))}")
"""
            result = subprocess.run(
                [str(venv_python), "-c", cleanup_script],
                capture_output=True,
                text=True,
                cwd=Path(__file__).parent
            )
            if result.stdout:
                print(result.stdout, end='')
            if result.stderr and "import" not in result.stderr:  # Ignore import warnings
                print(result.stderr, end='', file=sys.stderr)
            sys.exit(0 if result.returncode == 0 else 1)
        except Exception as e:
            print(f"Error running cleanup: {e}", file=sys.stderr)
            sys.exit(1)
    
    # Ensure venv is set up
    venv_python = ensure_venv()
    
    # Run the request
    exit_code = run_agent_request(venv_python, request)
    sys.exit(exit_code)

if __name__ == "__main__":
    main()